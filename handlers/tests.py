import os
import json
import logging
from datetime import datetime
from aiogram import Dispatcher, types, Router, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from main import bot
from utils.json_utils import load_training_data, load_user_data, save_user_data
from utils.bot_utils import send_message_or_photo
from handlers.states import TestStates
from text import (
    TEST_ALREADY_COMPLETED, PROFILE_NOT_FOUND, TEST_ERROR_DATA_NOT_FOUND, TEST_COMPLETED,
    TEST_ERRORS_MESSAGE, TEST_ERROR_ITEM, SECTION_COMPLETED_MESSAGE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

router = Router()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
async def send_test_question(user_id, chat_id, section, test_name, question_number, state: FSMContext):
    training_data = load_training_data()
    test_data = training_data.get(section, {}).get(test_name, {})

    if f"–í–æ–ø—Ä–æ—Å {question_number}" not in test_data:
        logger.info(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ '–í–æ–ø—Ä–æ—Å {question_number}' –≤ —Ç–µ—Å—Ç–µ {test_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.")
        return await finish_test(user_id, chat_id, section, test_name, state)

    question_data = test_data[f"–í–æ–ø—Ä–æ—Å {question_number}"]
    text = question_data["text"]
    image = question_data.get("image", None)
    correct_answer = question_data["correct_answer"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ state
    await state.update_data(
        section=section, 
        test_name=test_name, 
        question_number=question_number,
        correct_answer=correct_answer
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {question_number} —Ç–µ—Å—Ç–∞ '{test_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="answer_1")],
            [InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="answer_2")],
            [InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="answer_3")],
            [InlineKeyboardButton(text="4Ô∏è‚É£", callback_data="answer_4")]
        ]
    )

    await send_message_or_photo(chat_id, text, image, keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
@router.callback_query(lambda call: call.data.startswith("answer_"))
async def check_answer(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")

    data = await state.get_data()
    if not data:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç")
        return await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

    user_id = call.from_user.id
    chat_id = call.message.chat.id
    section = data["section"]
    test_name = data["test_name"]
    question_number = int(data["question_number"])  # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    correct_answer = int(data["correct_answer"])
    user_answer = int(call.data.split("_")[1])

    user_data = load_user_data(user_id)
    if not user_data:
        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    training_data = load_training_data()
    test_data = training_data.get(section, {}).get(test_name, {})
    correct_answers = data.get("correct_answers", 0)
    incorrect_answers = data.get("incorrect_answers", [])

    if user_answer == correct_answer:
        correct_answers += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_number}")
    else:
        question_data = test_data.get(f"–í–æ–ø—Ä–æ—Å {question_number}", {})
        mistake_entry = {
            "section": section,
            "test_name": test_name,
            "question_text": question_data.get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"),
            "correct_answer": question_data.get("correct_answer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "quest": question_data.get("quest", "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"),
            "quest_status": "not completed"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        }
        incorrect_answers.append(mistake_entry)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "mistakes" not in user_data:
            user_data["mistakes"] = []
        user_data["mistakes"].append(mistake_entry)
        save_user_data(user_id, user_data)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_number}. –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ mistakes.")

    await state.update_data(correct_answers=correct_answers, incorrect_answers=incorrect_answers)

    try:
        await bot.delete_message(chat_id, call.message.message_id)
        logger.info(f"–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    next_question_number = question_number + 1
    next_question_key = f"–í–æ–ø—Ä–æ—Å {next_question_number}"

    if next_question_key in test_data:
        await send_test_question(user_id, chat_id, section, test_name, next_question_number, state)
    else:
        await finish_test(user_id, chat_id, section, test_name, state)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async def finish_test(user_id, chat_id, section, test_name, state: FSMContext):
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ '{test_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    user_data = load_user_data(user_id)
    if not user_data:
        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        return await bot.send_message(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ —Ç–µ—Å—Ç
    for lesson in user_data["course_plan"].get(section, []):
        if lesson["title"] == test_name and lesson["status"] == "completed":
            logger.info(f"–¢–µ—Å—Ç '{test_name}' —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

    training_data = load_training_data()
    test_data = training_data.get(section, {}).get(test_name, {})
    total_questions = len(test_data)

    data = await state.get_data()
    correct_answers = data.get("correct_answers", 0)
    incorrect_answers = data.get("incorrect_answers", [])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for lesson in user_data["course_plan"].get(section, []):
        if lesson["title"] == test_name:
            lesson["status"] = "completed"
            lesson["total_questions"] = total_questions
            lesson["correct_answers"] = correct_answers
            break  

    user_data["warcoin"] = user_data.get("warcoin", 0) + correct_answers
    save_user_data(user_id, user_data)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
    completion_message = (
        f"‚úÖ –¢–µ—Å—Ç \"{test_name}\" –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
        f"üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n"
        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ Warcoin: {correct_answers}\n"
        f"üèÜ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['warcoin']} Warcoin\n"
    )
    await bot.send_message(chat_id, completion_message)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    result_message = (
        f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ {len(incorrect_answers)} –æ—à–∏–±–æ–∫.\n\n"
        "–ü–æ–∑–∂–µ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã, –≥–¥–µ –±—ã–ª–∏ –¥–æ–ø—É—â–µ–Ω—ã –æ—à–∏–±–∫–∏, –µ—â–µ —Ä–∞–∑.\n"
        "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞:\n"
    )

    if incorrect_answers:
        incorrect_tasks = "\n".join(
            f"- {item['quest']} (–°—Ç–∞—Ç—É—Å: {item['quest_status']})" for item in incorrect_answers
        )
        result_message += incorrect_tasks
    else:
        result_message += "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."

    await bot.send_message(chat_id, result_message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –≤–µ—Å—å —Ä–∞–∑–¥–µ–ª
    if is_section_completed(user_data, section):
        section_complete_message = SECTION_COMPLETED_MESSAGE.format(
            first_name=user_data.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
            section=section
        )
        await bot.send_message(chat_id, section_complete_message)

    await state.clear()

def is_section_completed(user_data, section):
    course_plan = user_data.get("course_plan", {})
    section_lessons = course_plan.get(section, [])
    return all(lesson["status"] == "completed" for lesson in section_lessons)