import os
import json
import logging
from aiogram import Router, F, Bot, types
from aiogram.types import Message, FSInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class EditProfile(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_mentor = State()
    waiting_for_email = State()

class MenuCallbackData:
    action = "back_to_menu"

class EditCallbackData:
    action = "edit_profile"

class AssignmentsCallbackData:
    action = "my_assignments"

async def profile_command(event: Message | CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ú–µ–Ω—é', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –∏ '–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è'."""
    user_id = event.from_user.id
    filename = f"data/users/user_{user_id}.json"
    image_path = "images/profile.jpg"

    if not os.path.exists(filename):
        text = "‚ùå *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start."
        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ñ–∞–π–ª {filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        if isinstance(event, Message):
            await event.answer(text, parse_mode="Markdown")
        elif isinstance(event, CallbackQuery):
            await event.message.answer(text, parse_mode="Markdown")
        return

    with open(filename, "r", encoding="utf-8") as file:
        data = json.load(file)
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    profile_text = (
        f"üìå *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data.get('registration_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üë§ –ò–º—è: {data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} {data.get('last_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üë• –ú–µ–Ω—Ç–æ—Ä: {data.get('mentor_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üåç –õ–æ–∫–∞—Ü–∏—è: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}, {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üéÆ VR-Room: {data.get('vr_room', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üé¢ VR-Extreme: {', '.join([key for key, val in data.get('attractions', {}).items() if val == '–ï—Å—Ç—å']) or '–ù–µ—Ç'}\n"
        f"ü™ô Warcoin: {data.get('warcoin', 0)}\n"
        f"üìö –ö—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è: {data.get('course', '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')}\n"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data=MenuCallbackData.action)],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=EditCallbackData.action)],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data=AssignmentsCallbackData.action)]
        ]
    )

    if os.path.exists(image_path):
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if isinstance(event, Message):
            await event.answer_photo(photo=FSInputFile(image_path), caption=profile_text, parse_mode="Markdown", reply_markup=keyboard)
        elif isinstance(event, CallbackQuery):
            await event.message.answer_photo(photo=FSInputFile(image_path), caption=profile_text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if isinstance(event, Message):
            await event.answer(profile_text, parse_mode="Markdown", reply_markup=keyboard)
        elif isinstance(event, CallbackQuery):
            await event.message.answer(profile_text, parse_mode="Markdown", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == AssignmentsCallbackData.action)
async def show_assignments(callback_query: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 'mistakes'."""
    user_id = callback_query.from_user.id
    filename = f"data/users/user_{user_id}.json"

    if not os.path.exists(filename):
        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ñ–∞–π–ª {filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    with open(filename, "r", encoding="utf-8") as file:
        data = json.load(file)

    mistakes = data.get("mistakes", [])
    if not mistakes:
        assignments_text = "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –í—Å–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
    else:
        assignments_text = "üìã *–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:*\n\n"
        for i, mistake in enumerate(mistakes, start=1):
            assignments_text += f"{i}. {mistake['quest']}\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ü—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")],
            [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data=MenuCallbackData.action)],
        ]
    )

    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        logger.info("–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback_query.message.answer(assignments_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback_query: CallbackQuery, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è."""
    logger.info(f"Callback 'back_to_profile' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        logger.info("–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await profile_command(callback_query)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == MenuCallbackData.action)
async def main_menu_handler(callback_query: CallbackQuery, bot: Bot):
    logger.info(f"Callback 'back_to_menu' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        logger.info("–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    from handlers.menu import show_menu
    await show_menu(callback_query.message)
    await callback_query.answer()